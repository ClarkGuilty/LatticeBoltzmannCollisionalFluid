##
using FiniteDiff, StaticArrays


fcalls = 0
function fa(dx,x) # in-place
  global fcalls += 1
  for i in 2:length(x)-1
    dx[i] = x[i-1] - 2x[i] + x[i+1]
  end
  dx[1] = -2x[1] + x[2]
  dx[end] = x[end-1] - 2x[end]
  nothing
end

const N = length(rho)
handleleft(x,i) = i==1 ? x[end] : x[i-1]
handleright(x,i) = i==length(x) ? x[1] : x[i+1]
function g(x) # out-of-place
  global fcalls += 1
  N = length(x)
  @SVector [handleleft(x,i) - 2x[i] + handleright(x,i) for i in 1:N]
end

g(rho)
##
rho_real = (2*A/σ^4) * (2 .* (x .- μ).^2 .- σ^2) .* exp.(-((x .- μ) ./ σ).^2) #Analytical derivative
##
